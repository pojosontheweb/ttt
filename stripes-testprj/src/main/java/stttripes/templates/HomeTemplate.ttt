<%--
    A basic template, that uses s:link.
--%>
<%@ page import="com.pojosontheweb.ttt.stripes.StripesTags" %>
<%@ page import="stttripes.actions.SimpleAction" %>
<%@ page import="stttripes.actions.CalculatorAction" %>
<%@ page import="com.pojosontheweb.ttt.stripes.Link" %>
<%@ page import="stttripes.templates.LinkTemplate" %>
<%@ page import="stttripes.actions.InputsAction" %>
<%@ page import="com.pojosontheweb.ttt.stripes.Url" %>
<%
    // get those tags...
    StripesTags s = new StripesTags(out);
%>
<h1>
    Stripes TTT test project
</h1>
<p>
    This is a very simple project that showcases the
    use of StripesTags. When using TTT templates with
    Stripes, you cannot use the regular JSP tags : you
    don't need/want JSPs with TTT, that's the whole point...
    With TTT, you use pure Java code instead of the &lt;s:*/&gt; tags,
    a.k.a the <code>StripesTags</code> APIs.
</p>

<h2>Links (s:link)</h2>
<ul>
    <li>
        <%= s.link(SimpleAction.class).setText("simple template (beanclass, no param)") %>
    </li>
    <li>
        <% try (Link l = s.link(SimpleAction.class).addParameter("myProp", "hello_world").open()) { %>
            simple template (beanclass, param)
        <% } %>
    </li>
    <li>
        <% try (Link l = s.link("/simple").open()) { %>
            simple template (url, no param)
        <% } %>
    </li>
    <li>
        <% try (Link l = s.link("/simple")
                .addParameter("myProp", "hello_world")
                .open()) { %>

                simple template (url, param)

        <% } %>
    </li>
    <li>
        <%-- using a custom "decorated" user-defined template --%>
        <%= new LinkTemplate(SimpleAction.class, "A decorated", "simple") %>
    </li>
    <li>
        <%-- build the link yourself by using s.url --%>
        <%
            String myHref = s.url(SimpleAction.class).get();
        %>
        <a href="<%= myHref %>">using url API</a>
    </li>
</ul>

<h2>Forms (s:form, s:text, etc.)</h2>
<ul>
    <li>
        <% try (Link l = s.link(CalculatorAction.class).open()) { %>
            templated calculator
        <% } %>
    </li>
    <li>
        <%= s.link(InputsAction.class).setText("various inputs") %>
    </li>
</ul>